{"title":"Regression -  Height and Weight data for 18 year olds","markdown":{"yaml":{"title":"Regression -  Height and Weight data for 18 year olds","jupyter":"python3"},"headingText":"Plot original data on scatterplot","containsRefs":false,"markdown":"\n\n-   Dataset - Height and Weight data for 18 year olds\n-   Plot original data on scatterplot\n-   Split data into training and test sets\n-   Use regression to see if the data is linear\n-   Get coefficients of linear equation and r-value\n    -   low r-value -- linear regression is not the best fit for the data\n\n```{python}\n#| tags: []\nimport sys\n\nassert sys.version_info >= (3, 7)\n```\n\n```{python}\n#| tags: []\nfrom packaging import version\nimport sklearn\n\nassert version.parse(sklearn.__version__) >= version.parse(\"1.0.1\")\n```\n\n```{python}\n#| tags: []\nimport pandas as pd\n\ndf = pd.read_csv(\"./SOCR-HeightWeight-checkpoint.csv\")\n\n#df['Weight(Pounds)']\ndf['Height(Inches)']\n```\n\n```{python}\n#| tags: []\nimport numpy as np\n```\n\n\n```{python}\n#| tags: []\nimport matplotlib.pyplot as plt\n\nplt.rc('font', size=14)\nplt.rc('axes', labelsize=14, titlesize=14)\nplt.rc('legend', fontsize=14)\nplt.rc('xtick', labelsize=10)\nplt.rc('ytick', labelsize=10)\nplt.figure(figsize=(10, 4))\n\nX = df['Weight(Pounds)'][0:200]\ny = df['Height(Inches)'][0:200]\nplt.scatter(X, y, marker='*')\nplt.xlabel(\"$weight$\")\nplt.ylabel(\"$height$\", rotation=90)\nplt.axis([90, 160, 60, 75])\nplt.grid()\nplt.show()\n```\n\n## Split data into testing and training sets\n\n```{python}\n#| tags: []\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Split the data into training/testing sets\nX_train = X[:-100]\nX_test = X[100:]\n\n# Split the targets into training/testing sets\ny_train = y[:-100]\ny_test = y[100:]\n```\n\n## Fit the data to a linear regression\n\n```{python}\n#| tags: []\n# Create linear regression object\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nX_train=np.array(X_train).reshape(-1, 1) # reshaping to 2D array\n#y_train=np.array(y_train).reshape(-1, 1) # reshaping to 2D array\nregr.fit(X_train, y_train)\n```\n\n```{python}\n#| tags: []\n# Make predictions using the testing set\nX_test=np.array(X_test).reshape(-1, 1) # reshaping to 2D array\ny_pred = regr.predict(X_test)\n```\n\n## Get coefficients of linear-equation\n\n```{python}\n#| tags: []\n# The coefficients\nprint(\"Coefficients: \\n\", regr.coef_)\nprint(\"y-intercept: \\n\", regr.intercept_)\n# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_pred))\n# The coefficient of determination: 1 is perfect prediction\nprint(\"Coefficient of determination: %.2f\" % r2_score(y_test, y_pred))\n```\n\nThe low r-value tells us that a linear regression is not the best fit for this data. We know that this model will not make very accurate predictions.\n\n```{python}\n#| tags: []\n# Plot outputs\nimport matplotlib.pyplot as plt\n\nplt.rc('font', size=14)\nplt.rc('axes', labelsize=14, titlesize=14)\nplt.rc('legend', fontsize=14)\nplt.rc('xtick', labelsize=10)\nplt.rc('ytick', labelsize=10)\nplt.figure(figsize=(10, 4))\n\nplt.xlabel(\"$weight$\")\nplt.ylabel(\"$height$\", rotation=90)\nplt.axis([90, 160, 60, 75])\n\nplt.scatter(X_test, y_test, marker='*')\nplt.plot(X_test, y_pred, color=\"black\", linewidth=2)\n\nplt.grid()\nplt.show()\n```\n\n## Trying other regressions to find a better fit\n\n```{python}\n#| tags: []\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\n\n# Fit a polynomial regression model\ndegree = 2  # You can try different degrees\npoly_reg = make_pipeline(PolynomialFeatures(degree), LinearRegression())\npoly_reg.fit(X_train, y_train)\n\n# Fit a Ridge regression model\nridge_reg = Ridge(alpha=1.0)  # Alpha is a hyperparameter that you can tune\nridge_reg.fit(X_train, y_train)\n\n# Fit a Lasso regression model\nlasso_reg = Lasso(alpha=0.1)  # Alpha is a hyperparameter that you can tune\nlasso_reg.fit(X_train, y_train)\n\n# Evaluate the models using test data\nmodels = {'Polynomial': poly_reg, 'Ridge': ridge_reg, 'Lasso': lasso_reg}\nfor name, model in models.items():\n    y_pred = model.predict(X_test)\n    mse = mean_squared_error(y_test, y_pred)\n    r2 = r2_score(y_test, y_pred)\n    print(f'{name} Regression - MSE: {mse:.2f}, R²: {r2:.2f}')\n```\n\nAll three models show very similar performance in terms of both MSE and R². The Ridge and Lasso's similar performance to polynomial regression could imply that higher-order terms do not significantly improve the model, or the chosen degree for the polynomial model was not high enough to capture more complex relationships.\n","srcMarkdownNoYaml":"\n\n-   Dataset - Height and Weight data for 18 year olds\n-   Plot original data on scatterplot\n-   Split data into training and test sets\n-   Use regression to see if the data is linear\n-   Get coefficients of linear equation and r-value\n    -   low r-value -- linear regression is not the best fit for the data\n\n```{python}\n#| tags: []\nimport sys\n\nassert sys.version_info >= (3, 7)\n```\n\n```{python}\n#| tags: []\nfrom packaging import version\nimport sklearn\n\nassert version.parse(sklearn.__version__) >= version.parse(\"1.0.1\")\n```\n\n```{python}\n#| tags: []\nimport pandas as pd\n\ndf = pd.read_csv(\"./SOCR-HeightWeight-checkpoint.csv\")\n\n#df['Weight(Pounds)']\ndf['Height(Inches)']\n```\n\n```{python}\n#| tags: []\nimport numpy as np\n```\n\n## Plot original data on scatterplot\n\n```{python}\n#| tags: []\nimport matplotlib.pyplot as plt\n\nplt.rc('font', size=14)\nplt.rc('axes', labelsize=14, titlesize=14)\nplt.rc('legend', fontsize=14)\nplt.rc('xtick', labelsize=10)\nplt.rc('ytick', labelsize=10)\nplt.figure(figsize=(10, 4))\n\nX = df['Weight(Pounds)'][0:200]\ny = df['Height(Inches)'][0:200]\nplt.scatter(X, y, marker='*')\nplt.xlabel(\"$weight$\")\nplt.ylabel(\"$height$\", rotation=90)\nplt.axis([90, 160, 60, 75])\nplt.grid()\nplt.show()\n```\n\n## Split data into testing and training sets\n\n```{python}\n#| tags: []\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Split the data into training/testing sets\nX_train = X[:-100]\nX_test = X[100:]\n\n# Split the targets into training/testing sets\ny_train = y[:-100]\ny_test = y[100:]\n```\n\n## Fit the data to a linear regression\n\n```{python}\n#| tags: []\n# Create linear regression object\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nX_train=np.array(X_train).reshape(-1, 1) # reshaping to 2D array\n#y_train=np.array(y_train).reshape(-1, 1) # reshaping to 2D array\nregr.fit(X_train, y_train)\n```\n\n```{python}\n#| tags: []\n# Make predictions using the testing set\nX_test=np.array(X_test).reshape(-1, 1) # reshaping to 2D array\ny_pred = regr.predict(X_test)\n```\n\n## Get coefficients of linear-equation\n\n```{python}\n#| tags: []\n# The coefficients\nprint(\"Coefficients: \\n\", regr.coef_)\nprint(\"y-intercept: \\n\", regr.intercept_)\n# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_pred))\n# The coefficient of determination: 1 is perfect prediction\nprint(\"Coefficient of determination: %.2f\" % r2_score(y_test, y_pred))\n```\n\nThe low r-value tells us that a linear regression is not the best fit for this data. We know that this model will not make very accurate predictions.\n\n```{python}\n#| tags: []\n# Plot outputs\nimport matplotlib.pyplot as plt\n\nplt.rc('font', size=14)\nplt.rc('axes', labelsize=14, titlesize=14)\nplt.rc('legend', fontsize=14)\nplt.rc('xtick', labelsize=10)\nplt.rc('ytick', labelsize=10)\nplt.figure(figsize=(10, 4))\n\nplt.xlabel(\"$weight$\")\nplt.ylabel(\"$height$\", rotation=90)\nplt.axis([90, 160, 60, 75])\n\nplt.scatter(X_test, y_test, marker='*')\nplt.plot(X_test, y_pred, color=\"black\", linewidth=2)\n\nplt.grid()\nplt.show()\n```\n\n## Trying other regressions to find a better fit\n\n```{python}\n#| tags: []\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\n\n# Fit a polynomial regression model\ndegree = 2  # You can try different degrees\npoly_reg = make_pipeline(PolynomialFeatures(degree), LinearRegression())\npoly_reg.fit(X_train, y_train)\n\n# Fit a Ridge regression model\nridge_reg = Ridge(alpha=1.0)  # Alpha is a hyperparameter that you can tune\nridge_reg.fit(X_train, y_train)\n\n# Fit a Lasso regression model\nlasso_reg = Lasso(alpha=0.1)  # Alpha is a hyperparameter that you can tune\nlasso_reg.fit(X_train, y_train)\n\n# Evaluate the models using test data\nmodels = {'Polynomial': poly_reg, 'Ridge': ridge_reg, 'Lasso': lasso_reg}\nfor name, model in models.items():\n    y_pred = model.predict(X_test)\n    mse = mean_squared_error(y_test, y_pred)\n    r2 = r2_score(y_test, y_pred)\n    print(f'{name} Regression - MSE: {mse:.2f}, R²: {r2:.2f}')\n```\n\nAll three models show very similar performance in terms of both MSE and R². The Ridge and Lasso's similar performance to polynomial regression could imply that higher-order terms do not significantly improve the model, or the chosen degree for the polynomial model was not high enough to capture more complex relationships.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"regression-checkpoint.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"cosmo","title-block-banner":true,"title":"Regression -  Height and Weight data for 18 year olds","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}