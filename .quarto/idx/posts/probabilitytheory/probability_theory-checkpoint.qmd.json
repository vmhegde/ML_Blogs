{"title":"Probability Theory - Sentiment Analysis with Naive Bayes","markdown":{"yaml":{"title":"Probability Theory - Sentiment Analysis with Naive Bayes","jupyter":"python3"},"headingText":"Loading and Preprocessing the Data","containsRefs":false,"markdown":"\n\nPerforming sentiment analysis on Twitter tweets using the Naive Bayes algorithm.\n\n```{python}\n#| tags: []\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import classification_report\n```\n\n\nFirst, we load the data and explore its structure.\n\n```{python}\n#| tags: []\n# Load the dataset\ndata = pd.read_csv('./twitter_training.csv' )\n\n# Display the first few rows of the dataset\ndata.head()\n```\n\nNext, we preprocess the data by removing rows with missing text values.\n\n```{python}\n#| tags: []\n# Remove rows with missing values in the 'text' column\ncleaned_data = data.dropna(subset=['Text'])\n```\n\n## Preparing the Data for Modeling\n\nWe split the data into training and testing sets.\n\n```{python}\n#| tags: []\n# Splitting the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(cleaned_data['Text'], cleaned_data['Sentiment'], test_size=0.2, random_state=42)\n```\n\n## Building and Training the Naive Bayes Model\n\nWe use a pipeline to vectorize the text and train the model.\n\n```{python}\n#| tags: []\n# Preprocessing and vectorization using a pipeline\nmodel = make_pipeline(\n    TfidfVectorizer(),\n    MultinomialNB()\n)\n\n# Training the model\nmodel.fit(X_train, y_train)\n```\n\n## Evaluating the Model\n\nFinally, we evaluate the model's performance on the test set.\n\n```{python}\n#| tags: []\n# Evaluating the model\npredictions = model.predict(X_test)\nreport = classification_report(y_test, predictions)\nprint(report)\n```\n\n## Testing the Model with New Data and Visualization\n\nNow, we will test the model with new data and visualize the accuracy of the model.\n\n```{python}\n#| tags: []\n# Example new data to test\nnew_data = [\"This movie was fantastic, I loved it!\",\n            \"The movie was okay, but I think the ending could be better\",\n            \"I did not like the movie, it was boring and too long\"]\n\n# Predicting the sentiment of the new data\nnew_predictions = model.predict(X_test)\nprint(X_test)\nnew_predictions\n```\n\n## Data Visualization\n\nCreating a confusion matrix to illustrate the predictions made by the classifier on the test sets.\n\n```{python}\n#| tags: []\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nimport seaborn as sns\n\nnew_data_actual_labels = y_test\n\n# Calculating accuracy\naccuracy = accuracy_score(new_data_actual_labels, new_predictions)\n\n# Creating a confusion matrix\nconf_matrix = confusion_matrix(new_data_actual_labels, new_predictions)\n\n# Plotting the confusion matrix\nsns.heatmap(conf_matrix, annot=True, fmt='g', cmap='Blues')\nplt.title(f'Model Accuracy: {accuracy:.2f}')\nplt.xlabel('Predicted labels')\nplt.ylabel('True labels')\nplt.show()\n```\n\n## Interpretation\n\nThe four labels represent four sentiments: Positive, Negative, Neutral, and Irrelevant The diagonal entries in the matrix tell us how many predictions for each class were correct: the model correctly predicted class 0 for 1037 instances, class 1 for 3985 instances, class 2 for 2174 instances, and class 3 for 3370 instances. All of the off-diagonal entries represent misclassifications.\n\nOverall, the model is most accurate with classes 1 and 3, where the diagonal values are high relative to the off-diagonal values. The model seems to struggle the most with accurately classifying class 2.\n","srcMarkdownNoYaml":"\n\nPerforming sentiment analysis on Twitter tweets using the Naive Bayes algorithm.\n\n```{python}\n#| tags: []\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import classification_report\n```\n\n## Loading and Preprocessing the Data\n\nFirst, we load the data and explore its structure.\n\n```{python}\n#| tags: []\n# Load the dataset\ndata = pd.read_csv('./twitter_training.csv' )\n\n# Display the first few rows of the dataset\ndata.head()\n```\n\nNext, we preprocess the data by removing rows with missing text values.\n\n```{python}\n#| tags: []\n# Remove rows with missing values in the 'text' column\ncleaned_data = data.dropna(subset=['Text'])\n```\n\n## Preparing the Data for Modeling\n\nWe split the data into training and testing sets.\n\n```{python}\n#| tags: []\n# Splitting the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(cleaned_data['Text'], cleaned_data['Sentiment'], test_size=0.2, random_state=42)\n```\n\n## Building and Training the Naive Bayes Model\n\nWe use a pipeline to vectorize the text and train the model.\n\n```{python}\n#| tags: []\n# Preprocessing and vectorization using a pipeline\nmodel = make_pipeline(\n    TfidfVectorizer(),\n    MultinomialNB()\n)\n\n# Training the model\nmodel.fit(X_train, y_train)\n```\n\n## Evaluating the Model\n\nFinally, we evaluate the model's performance on the test set.\n\n```{python}\n#| tags: []\n# Evaluating the model\npredictions = model.predict(X_test)\nreport = classification_report(y_test, predictions)\nprint(report)\n```\n\n## Testing the Model with New Data and Visualization\n\nNow, we will test the model with new data and visualize the accuracy of the model.\n\n```{python}\n#| tags: []\n# Example new data to test\nnew_data = [\"This movie was fantastic, I loved it!\",\n            \"The movie was okay, but I think the ending could be better\",\n            \"I did not like the movie, it was boring and too long\"]\n\n# Predicting the sentiment of the new data\nnew_predictions = model.predict(X_test)\nprint(X_test)\nnew_predictions\n```\n\n## Data Visualization\n\nCreating a confusion matrix to illustrate the predictions made by the classifier on the test sets.\n\n```{python}\n#| tags: []\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nimport seaborn as sns\n\nnew_data_actual_labels = y_test\n\n# Calculating accuracy\naccuracy = accuracy_score(new_data_actual_labels, new_predictions)\n\n# Creating a confusion matrix\nconf_matrix = confusion_matrix(new_data_actual_labels, new_predictions)\n\n# Plotting the confusion matrix\nsns.heatmap(conf_matrix, annot=True, fmt='g', cmap='Blues')\nplt.title(f'Model Accuracy: {accuracy:.2f}')\nplt.xlabel('Predicted labels')\nplt.ylabel('True labels')\nplt.show()\n```\n\n## Interpretation\n\nThe four labels represent four sentiments: Positive, Negative, Neutral, and Irrelevant The diagonal entries in the matrix tell us how many predictions for each class were correct: the model correctly predicted class 0 for 1037 instances, class 1 for 3985 instances, class 2 for 2174 instances, and class 3 for 3370 instances. All of the off-diagonal entries represent misclassifications.\n\nOverall, the model is most accurate with classes 1 and 3, where the diagonal values are high relative to the off-diagonal values. The model seems to struggle the most with accurately classifying class 2.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"probability_theory-checkpoint.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"cosmo","title-block-banner":true,"title":"Probability Theory - Sentiment Analysis with Naive Bayes","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}